{	
	Juego4enLineaEquipo04.gcl
	DESCRIPCIÓN: Este es el algoritmo que sigue el juego Cuatro en línea, que consiste
	en una matriz 6x7 y dos "fichas" (para 2 jugadores) que tendrán el valor 1 y 2 
	(1 para el usuario y 2 para la computadora) cuando ocupen una posición de la matriz,
	y el objetivo del juego es completar una línea de 4 fichas de forma vertical, horizontal o diagonal.

	Autores:
	       Br. Pietro Iaia
	       Br. Antonella Requena
	Última fecha de modificación: 16/03/2018
}

proc otraPartida(in-out jugarOtra:bool, out PrimeraPartida:bool) 
    {jugarOtra=True}                    //Este procedimiento verifica si el usuario desea jugar otra partida
    {jugarOtra=True \/ jugarOtra=False} //el parametro in-out jugarOtra es un bool que vale True si el usuario quiere jugar otra partida
    [
     VAR     
        y : string;

        PrimeraPartida:=False;
        write("La partida ha finalizado")
        write("¿Desea jugar otra partida? Tipee Si o No ")
        read(y)
	    if y="Si" ->
	         jugarOtra:=True
	    [] y="No" ->
	         jugarOtra:=False
	    fi

  ]

//Este procedimiento Inicializa la partida, es decir, vacía el tablero (coloca 0 en todas las posiciones de la matriz), pide el nombre del jugador 
// y pide el nivel
// parametros: N y M son el tamano de la matriz, in-out: linea corresponde a la fila en la matriz que se esta jugando,
// p,q son los valores de la ultima jugada (p corresponde a la posiicion en la fila y q a la posicion en la columna)
// nombreJugador es la variable que guarda el nombre del jugador, Nivel el nivel (1 si es basico o 2 si es medio) y Matrix es la matriz que representa el tablero 
proc InicializarPartida(in PrimeraPartida:bool ,Ganador,N,M: int; out linea,p,q:int,JugadaPrimeraVez:bool, nombreJugador:string,Nivel:int,Matrix: array[0..N)[0..M) of int, turno:int)
     VAR i,j:int; //Variables para recorrer la matriz
         ganador:int;
     {N>0 /\ M>0}
     {(%forall i,j: 0<=i<N /\ 0<=j<M : Matrix[i][j]=0)}
    [
    //ENTRADA DE DATOS
     write("Ingrese su nombre: ") ;
     read(nombreJugador) ;
     write("Indique  el nivel que desea jugar: ");
     write("Nivel Básico: Tipee 1.");
     write("Nivel Medio: Tipee 2.");
     read(nivel);

     //INICIALIZACION DEL TABLERO
     i:=0;
     //Invariante y cota
     {(%forall m,n: 0<=n<i /\ 0<=m<j : Matrix[n][m]=0) /\ 0<=i<=N /\ 0<=j<=M}
     {cota: N-i}
     do i<N ->
       j:=0;
       {0<=i<N /\ 0<=j<M (%forall m,n: 0<=n<i-1 /\ 0<=m<j-1 : Matrix[n][m]=0) /\ (%forall m: 0<=m<j : Matrix[i][m]=0) }
       {cota M-j}
       do j<M ->
         Matrix[i][j]:=0
         ;j:=j+1 
       od
       ;i:=i+1
     od
    
     //Variables para el nivel medio del CPU
	 Linea:=5;
	 q,p:= Random.Randint(6),5; //p y q son las jugadas de la computadora en el nivel medio. Estas variables son para guardar la ultima jugada.
	 JugadaPrimeraVez:=True

     //Turnos
     if PrimeraPartida=True ->
        turno=2
     [] PrimeraPartida=False ->
        if Ganador=0 ->
            turno=2
        [] Ganador=1 ->
            turno=1
        [] Ganador=2 ->
            turno=2
        fi
    fi
   ]

proc SeguirJugando (in-out siguePartida:bool)
  {siguePartida=True}
  {siguePartida=True \/ siguePartida=False} 
  [ 
    
    var seguirJugando: string;
	  write ("¿Quiere seguir jugando?")
	    read (seguirJugando)
	    if seguirJugando="Si" ->
	        skip
	    [] seguirJugando="No" ->
	        siguePartida:=False 
	    fi
  ]

proc DeterminarPartidaTerminada(in N:int, M:int, Ganador:int, Matrix:array[0..N)[0..M) of int, in-out siguePartida:bool)
{N>0 /\ M>0 /\ (Ganador=0 \/ Ganador=1 \/ Ganador=2)}
{siguePartida= True \/ siguePartida= False}
[ var n,i,j:int 
    n:=0
    i:=0
    do i<N ->
        j:=0
        do j<M ->
            if Matrix[i][j]=0 ->
                n:=1
            [] Matrix[i][j]!=0 ->
                skip
            fi;
            j:=j+1
        od;
        i:=i+1
    od;
    if n=1 ->
        skip
    [] n!=1 ->
        siguePartida:=False
    fi;

    if Ganador=0 ->
        skip
    [] Ganador=1 \/ Ganador=2 ->
        siguePartida:=False
    fi
]

proc ObtenerJugada(in nivel:int,turno:int,nombreJugador:string,N:int,M:int;in-out Matrix: array[0..N)[0..M) of int,JugadaPrimeraVez:bool,linea,p,q:int;out jugada:int)

<<<<<<< HEAD
<<<<<<< HEAD
    {N>0 /\ M>0 /\ (nivel=1 \/ nivel=2) /\ (turno=1 \/ turno=2) /\ linea=(%exist i:0<=i<N: i)) /\ p=(%exist i:0<=i<N:i) /\ q=(%exist i:0<=i<M:i)  }
    {(turno=1 /\ Matrix[i][jugada]=1) \/ (turno=2 /\ nivel=1 /\ (%exist i,j : 0<=i<N /\ 0<=j<M : Matrix[i][j]=2) \/ (turno=2 /\ nivel=2 /\ Matrix[p][q]=2)}
=======
    {N>0 /\ M>0 /\ (nivel=1 \/ nivel=2) /\ (turno=1 \/ turno=2) /\ 0=<linea<N /\ 0=<p<N  /\ 0=<q<N  }
    {(turno=1 /\ Matrix[i][jugada]=1) \/ (turno=2 /\ nivel=1 /\ (%exist i,j : 0<=i<N /\ 0<=j<M : Matrix[i][j]=2)) \/ (turno=2 /\ nivel=2 /\ Matrix[p][q]=2)}
>>>>>>> Antonella
  [
     VAR 
         i,j,filaLlena:int; //Variables para recorrer la matrix y contar la cantidad de casillas que estan ocupadas en la columna seleccionada
         casillaLlena,Valida:bool; // Si la casilla esta llena y si la casilla que escogio el computador es valida (no esta ocupada)
    if turno=1 -> //turno del usuario
<<<<<<< HEAD
=======
    {N>0 /\ M>0 /\ (turno=1 \/ turno=2) /\ (nivel=1 \/ nivel=2)}
    {(%exist i: 0<=i<=5: Linea=i) /\ 0<=p<N /\ 0<=q<M /\ 0<=jugada<M}
  [
     VAR 
         i,j,filaLlena:int;
         casillaLlena,Valida:bool;
     if t=1 ->
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
>>>>>>> Antonella
        write("Su turno") ; 
        write("Por favor, "+nombreJugador+" introduzca una jugada: ") ;
        read(jugada) ;
        validarJugada(N,M,Matrix,jugada) //llama al proc validar jugada para ver si es valida
    [] turno!=1 /\ nivel=1 ->  //Nivel Basico
        write("Turno del computador") ;
        casillaLlena:=False;
        do casillaLlena=False ->
            q:=random.randint(M-1); //Escoge una columna aleatoria a jugar por ser nivel basico
            i,filaLlena:=N-1,0; // i es la variable para recorrer las filas de abajo hacia arriba buscando la primera casilla vacia
            do(i>=0 /\ casillaLlena=False /\ filaLlena!=N) ->
              if Matrix[i][jugada]=0 ->
                 Matrix[i][jugada]:=2;
                 casillaLlena:=True //Sale del ciclo una vez que asigna
              [] Matrix[i][jugada]!=0 ->
                 filaLlena:=filaLlena+1 //Contador para la cantidad de casillas de la columna seleccionada que estan ocupadas
              fi
              ;i:=i-1
            od
          od

      [] turno=2 /\ nivel=2 -> //Nivel Medio 
	        if JugadaPrimeraVez=True -> //Esta guardia es para la primera vez que juega el CPU
	            do JugadaPrimeraVez=True ->
	            if Matrix[p][q]=0 ->   //Si la casilla que selecciona, tiene un 0 (esta vacia), entonces, le asigna 2 
	                Matrix[p][q]:=2;
	                JugadaPrimeraVez:=False //Ya la primera jugada se hizo, entonces, se le asigna false para que no vuelva a entrar a esta guardia
	            [] Matrix[p][q]!=0 ->
	                q:=Random.Randint(6)  //Si la casilla que selecciona NO tiene un 0, entonces debe escoger otra columna de forma aleatoria y se repite el ciclo
	            fi
	        [] JugadaPrimeraVez=False ->
	            DeterminarLinea(N, M, Matrix, p, q, linea) //Determina si la linea a formar es horizontal derecha(linea 0), horizontal izqda (linea 1),
	            if Linea=0 ->                              // vertical (linea 2), diagonal derecha (linea 3), diagonal izqda (linea 4), o es random (linea 5)
	                q:=q+1
	                Matrix[p][q]:=2                //Si escogio la linea 0, a la posicion anterior en la columna le suma 1 mas para jugar alli.
	            [] Linea=1 -> 
	                q:=q-1
	                Matrix[p][q]:=2
	            [] Linea=2 -> 
	                p:=p-1
	                Matrix[p][q]:=2
	            [] Linea=3 -> 
	                p,q:=p-1,q+1
	                Matrix[p][q]:=2
	            [] Linea=4 -> 
	                p,q:=p-1,q-1;
	                Matrix[p][q]:=2
	            [] Linea=5 ->   //Esto lo hace cuando no puede construir ninguna linea, entonces tiene que escoger otra casilla e intentar construir otra linea
	                Valida:=False;
	                do Valida=False ->
	                    p,q:=random.randint(N-1), random.randint(M-1)
	                    DeterminarJugadaValida(Matrix, p, q, Valida)      
	                    if Valida=False ->
	                        skip
	                    [] Valida=True ->
	                        Matrix[p][q]:=2   //Aqui asigna la casilla una vez que encontro una casilla donde puede jugar
	                    fi;
	                od;
	            fi;
	        fi;
	    fi
	]

<<<<<<< HEAD

<<<<<<< HEAD
proc DeterminarLinea(in N:int, M:int, Matrix: array[0..N)[0..M) of int, p:int, q:int ; in-out Linea:int) //Este proc es para determinar la linea que intentara construir el cpu
{(Linea=0 \/ Linea=1 \/ Linea=2 \/ Linea=3 \/ Linea=4 \/ Linea=5) /\ Matrix[p][q]=2}
{(Linea=0 \/ Linea=1 \/ Linea=2 \/ Linea=3 \/ Linea=4 \/ Linea=5)}
[ var Valida0, Valida1, Valida2, Valida3, Valida4, SigueFila :bool; //SigueFila es una variable para chequear si el cpu puede seguir construyendo esa linea 
=======
proc DeterminarLinea(in N:int, M:int, Matrix: array[0..N)[0..M) of int, p:int, q:int ; in-out Linea:int)
{(%exist i: 0<=i<=5: Linea=i)}
{(%exist i: 0<=i<=5: Linea=i)}
[ var Valida0, Valida1, Valida2, Valida3, Valida4, SigueFila :bool  
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
proc DeterminarLinea(in N:int, M:int, Matrix: array[0..N)[0..M) of int, p:int, q:int ; in-out Linea:int) //Este proc es para determinar la linea que intentara construir el cpu
{(%exist i: 0<=i<=5: Linea=i)}
{(%exist i: 0<=i<=5: Linea=i)}
[ var Valida0, Valida1, Valida2, Valida3, Valida4, SigueFila :bool  
>>>>>>> Antonella

    DeterminarJugadaValida(N, M, Matrix, p, q+1, Valida0)  
    DeterminarJugadaValida(N, M, Matrix, p, q-1, Valida1)  
    DeterminarJugadaValida(N, M, Matrix, p-1, q, Valida2)           //Verifica si cada posible fila tiene ficha abajo, y luego en el if de abajo lo toma en cuenta
    DeterminarJugadaValida(N, M, Matrix, p-1, q+1, Valida3) 
    DeterminarJugadaValida(N, M, Matrix, p-1, q-1, Valida4) 
    SigueFila:=False;

    if Linea=0 ->
        DeterminarJugadaValida(N, M, Matrix, p, q+1, SigueFila)
    [] Linea=1 -> 
        DeterminarJugadaValida(N, M, Matrix, p, q-1, SigueFila) 
    [] Linea=2 ->
        DeterminarJugadaValida (N, M, Matrix, p-1, q, SigueFila)
    [] Linea=3 ->
        DeterminarJugadaValida (N, M, Matrix, p-1, q+1, SigueFila)
    [] Linea=4 ->
        DeterminarJugadaValida (N, M, Matrix, p-1, q-1, SigueFila)
    [] Linea=5 ->
        skip
    fi;

    if SigueFila=True ->   //Sigue construyendo esa linea, no pasa nada
        skip
    [] SigueFila=False ->  //Intenta construir otra linea, intentara construir una horizontal, vertical o diagonal dependiendo de la guardia que se cumpla
        if Valida0=True ->
            Linea:=0
        [] Valida1=True ->
            Linea:=1
        [] Valida2=True ->
            Linea:=2
        [] Valida3=True ->
            Linea:=3
        [] Valida4=True ->
            Linea:=4
        [] Valida0=False /\ Valida1=False /\ Valida2=False /\ Valida3=False /\ Valida4=False ->                                           
            Linea:=5  //No hay ninguna linea que pueda intentar construir entonces vuelve a intentar construir una linea nueva en otra casilla
        fi
    fi
]

<<<<<<< HEAD

<<<<<<< HEAD
proc DeterminarJugadaValida(in N,M:int; Matrix: array[0..N)[0..M) of int; i:int, j:int; out Valida:bool) //Este procedimiento chequea si el cpu puede colocar la ficha en la casilla que intento en el procedimiento ObtenerJugada, esto es si la casilla de abajo esta ocupada y si esta jugando en la fila extrema inferior 
{N>0 /\ M>0 /\ 0<=i<N /\ 0<=j<M}
=======
proc DeterminarJugadaValida (in N,M:int; Matrix: array[0..N)[0..M) of int; i:int, j:int; out Valida:bool)
{N>0 /\ M>0}
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
proc DeterminarJugadaValida(in N,M:int; Matrix: array[0..N)[0..M) of int; i:int, j:int; out Valida:bool) //Este procedimiento chequea si el cpu puede colocar la ficha en la casilla que intento en el procedimiento ObtenerJugada, esto es si la casilla de abajo esta ocupada y si esta jugando en la fila extrema inferior 
{N>0 /\ M>0 /\ 0<=i<N /\ 0<=j<M}
>>>>>>> Antonella
{Valida=False \/ Valida=True}
[
    if (i>=0 /\ i<=N-1 /\ j>=0 /\ j<=M-1) ->
        if Matrix[i][j]=0 ->
            if i=5 -> Valida:=True
            [] i!=5 -> 
                if Matrix[i+1][j]=1 \/ Matrix[i+1][j]=2 -> Valida:= True
                [] Matrix[i+1][j]=0 -> Valida:=False
                fi
            fi
        [] Matrix[i][j]!=0 ->
            Valida:=False
        fi
    [] (i<0 \/ i>N-1 \/ j<0 \/ j>M-1) -> //Casos borde, se sale de la matriz, no puede hacer la proxima jugada alli
        Valida:=False
    fi
]

<<<<<<< HEAD

<<<<<<< HEAD
proc validarJugada(in N, M:int;in-out Matrix: array[0..N)[0..M), jugada:int,out esValida:bool, i:int) //este procedimiento valida la jugada del USUARIO
     {0<=jugada<M}
     {Matrix[i][jugada]=1} 
=======
proc validarJugada(in N, M:int;in-out Matrix: array[0..N)[0..M), jugada:int,out esValida:bool, i:int) 
     {N>0 /\ M>0}
     {esValida=0 \/ esValida=1} //Pre y post no son las mas adecuadas CHEQUEAR
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
  [
=======
proc validarJugada(in N, M:int;in-out Matrix: array[0..N)[0..M), jugada:int,out esValida:bool, i:int) //este procedimiento valida la jugada del USUARIO
     {0<=jugada<M}
     {Matrix[i][jugada]=1} 
     [
>>>>>>> Antonella
		var ocupada: bool;
		     filaLlena:int;

    ocupada:=True;
    do ocupada=True ->
      i,filaLlena:=N-1,0;
      do (i>0 /\ ocupada=True /\ filaLlena!=N) ->
        if Matrix[i][jugada]=0 ->
          esValida:=True;
          Matrix[i][jugada]:=1;
          ocupada:=False //La casilla no esta ocupada, se sale del ciclo
       [] Matrix[i][jugada]!=0 ->
          filaLlena:=filaLlena+1
       fi
       ;i:=i-1
     od
     if filaLlena=N -> //si la fila esta llena entonces no puede colocar una ficha alli, debe intentarlo de nuevo
        esValida=False;
        write("La jugada no es válida. Por favor, inténtelo de nuevo")
        write("Recuerde que sólo puede colocar fichas en casillas vacías sobre otras ocupadas y en casillas vacías de la fila extrema inferior")
     [] filaLlena!=N ->
        //Caso imposible dado que si filaLlena!=N entonces sigue en el ciclo.
        skip
     fi
    od
    ]

//Este procedimiento refleja la jugada (simula la interfaz grafica)
proc ReflejarJugada(in i, jugada,turno:int;Matrix:array[0..N)[0..M) of int)
{turno=1 \/ turno=2}
{True}
[ var UltimaJugada: int;
    if turno=1 ->
       dibujarcirculo(Matrix[i][jugada],amarillo)
    [] turno=2 ->
       dibujarcirculo(Matrix[i][jugada],azul)
    fi

    UltimaJugada:=jugada;
    ColocarJugada(UltimaJugada, Tablero) // ColocarJugada(que cosa, en que lugar, donde se pondra)
    dibujarTablero(N,M)
]
 //este procedimiento simula la interfaz grafica de dibujar el tablero
proc ​dibujarTablero(in alto:int, in ancho: int) 
     {Pre: alto>0 /\ ancho>0} 
     {Post: se dibuja un cuadro de ancho x alto} 

     [
       dibujarlinea(0,N)
       dibujarlinea(0,M)
      
     ]

//este procedimiento cambia el turno
proc CambiarTurno(in-out turno:int)
{turno=1 \/ turno=2}
{turno=1 \/ turno=2}
[
    if turno=1 -> turno:=2
    [] turno=2 -> turno:=1
    fi
]
// este procedimiento determina el ganador
proc DeterminarGanador(in N:int, M:int, turno:int, Matrix: array[0..N)[0..M); out Ganador:int)
{turno=1 \/ turno=2}
{Ganador=0 \/ Ganador=1 \/ Ganador=2}
[
    Ganador:=0;

    LineaVertical (N, M, turno, Matrix, Ganador)    //Llama a los procedimientos de linea para ver si algun jugador completo alguna linea
    LineaHorizontal (N, M, turno, Matrix, Ganador)
    LineaDiagonalIzquierda (turno, Matrix, Ganador)
    LineaDiagonalDerecha (turno, Matrix, Ganador)
    
]

//Los procedimientos de Linea a continuacion verifican en cada iteracion si algun jugador (representados por el turno) completo alguna linea
proc LineaVertical(in N:int, M:int, turno:int, Matrix:int, in-out Ganador:int)
{turno=1 \/ turno=2}
{Ganador=0 \/ Ganador=1 \/ Ganador=2}
[ var j,i:int
    i:=0;
    do i<N-3 ->
        j:=0
        do j<M ->
            if Matrix[i][j]=turno /\ Matrix[i+1][j]=turno /\ Matrix[i+2][j]=turno /\ Matrix[i+3][j]=turno ->
                Ganador:=turno;
                ResaltarLinea(Matrix[i][j],Matrix[i+1][j],Matrix[i+2][j],Matrix[i+3][j])
            [] Matrix[i][j]!=turno \/ Matrix[i+1][j]!=turno \/ Matrix[i+2][j]!=turno \/ Matrix[i+3][j]!=turno ->
                skip
            fi;
            j:=j+1
        od;
        i:=i+1
    od
]

proc LineaHorizontal(in N:int, M:int, turno:int, Matrix:int, in-out Ganador:int)
{turno=1 \/ turno=2}
{Ganador=0 \/ Ganador=1 \/ Ganador=2}
[ var i:int
    j:=0
    do j<M-3 ->
        i:=0
        do i<N ->
            if Matrix[i][j]=turno /\ Matrix[i][j+1]=turno /\ Matrix[i][j+2]=turno /\ Matrix[i][j+3]=turno ->
                Ganador:=turno
                ResaltarLinea(Matrix[i][j],Matrix[i][j+1],Matrix[i][j+2],Matrix[i][j+3])
            [] Matrix[i][j]!=turno \/ Matrix[i][j+1]!=turno \/ Matrix[i][j+2]!=turno \/ Matrix[i][j+3]!=turno ->
                skip
            fi;
            i:=i+1
        od;
        j:=j+1
    od
]

proc LineaDiagonalDerecha(in turno:int, Matrix:int, in-out Ganador:int)
{turno=1 \/ turno=2}
{Ganador=0 \/ Ganador=1 \/ Ganador=2}
[ var i,j:int
    i:=0
    do i<3 ->
        j:=0
        do j<4 ->
            if Matrix[i][j]=turno /\ Matrix[i+1][j+1]=turno /\ Matrix[i+2][j+2]=turno /\ Matrix[i+3][j+3]=turno ->
                Ganador:=turno;
                ResaltarLinea(Matrix[i][j],Matrix[i+1][j+1],Matrix[i+2][j+2],Matrix[i+3][j+3])
            [] Matrix[i][j]!=turno \/ Matrix[i+1][j+1]!=turno \/ Matrix[i+2][j+2]!=turno \/ Matrix[i+3][j+3]!=turno ->
                skip
            fi;
            j:=j+1
        od;
        i:=i+1
    od
]

proc LineaDiagonalIzquierda (in N,M, turno:int; Matrix: array[0..N)[0..M) of int, in-out Ganador:int)
{N>0 /\ M>0 /\ (turno=1 \/ turno=2)}
{Ganador=0 \/ Ganador=1 \/ Ganador=2}
[ var i,j:int
    i:=0
    do i<3 ->
        j:=6
        do j>2 ->
            if Matrix[i][j]=turno /\ Matrix[i+1][j-1]=turno /\ Matrix[i+2][j-2]=turno /\ Matrix[i+3][j-3]=turno ->
                Ganador:=turno;
                ResaltarLinea(Matrix[i][j],Matrix[i+1][j-1],Matrix[i+2][j-2],Matrix[i+3][j-3]) //Si hay un ganador, se resalta la linea
            [] Matrix[i][j]!=turno \/ Matrix[i+1][j-1]!=turno \/ Matrix[i+2][j-2]!=turno \/ Matrix[i+3][j-3]!=turno ->
                skip
            fi;
            j=j-1
        od;
        i=i+1
    od
]
//Este procedimiento simula la interfaz grafica de resaltar la linea ganadora
proc ResaltarLinea(in a,b,c,d:int)
{ (%forall i: i={a,b,c,d}: i=1 \/ i=2 )}
{true}
[

 DibujarCasilla(a,verde) //Esta instruccion dibuja una casilla para cada variable (un recuadro 2x2) y las colorea
 DibujarCasilla(b,verde)
 DibujarCasilla(c,verde)
 DibujarCasilla(d,verde)

]

//Este procedimiento simula la parte grafica de mostrar el ganador
proc DesplegarGanador(in Ganador:int)
{Ganador=1 \/ Ganador=0 \/ Ganador=2}
{True}
[
    if Ganador=1 -> write("El ganador de la partida es " +NombreJugador+ "!")
    [] Ganador=2 -> write("El ganador de la partida es el computador!")
    [] Ganador=0 -> write("La partida termino en empate!")
    fi
]
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> Antonella
//Este procedimiento cuenta la cantidad de veces que cada ganador gana tras cada partida, tambien cuenta los empates, 0 es empate, 1 es el usuario y 2 es el cpu
proc ContadorGanadorPartida(in ganador:int;out ganador0,ganador1,ganador2:int) 
{ganador=0 \/ ganador=1 \/ ganador=2}
{ (%exist i: i={ganador0,ganador1,ganador2} : i=(%sigma j: 0<=j<k /\ 0<k<=n : 1) } n es el nro de partidas, suponiendo que es cte
<<<<<<< HEAD
=======

proc ContarGanadorPartida(in ganador:int;out ganador0,ganador1,ganador2:int) //Este procedimiento cuenta la cantidad de partidas ganadas por cada jugador
{ganador=0 \/ ganador=1 \/ ganador=2}
{ganador0>=0 /\ ganador1>=0 /\ ganador2>=0}
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
>>>>>>> Antonella

 VAR
[
 if ganador=0 ->
    ganador0:=ganador0+1;
 [] ganador=1 ->
    ganador1:=ganador1+1;
 [] ganador=2 ->
    ganador2:=ganador2+1;
 fi
]
//Este proceso simula la interfaz grafica del resultado final que es el total cuando el usuario no quiere jugar mas
proc DesplegarResultadoFinal(in ganador0,ganador1,ganador2:int,nombreJugador:string)
<<<<<<< HEAD
<<<<<<< HEAD
{ganador0>=0 /\ ganador1>=0 /\ ganador2>=0 }
{true}
=======
{ganador1>=0 /\ ganador2>=0 /\ ganador0>=0}
{True}
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
{ganador0>=0 /\ ganador1>=0 /\ ganador2>=0 }
{true}
>>>>>>> Antonella

[
 write("El resultado final es:");
 write("Total partidas ganadas por "+nombreJugador);
 write(ganador1);
 write("Total partidas ganadas por la computadora ");
 write(ganador2);
 write("Total partidas empatadas");
 write(ganador0)
]


[ CONST 
 N,M:int;
 N=6,M=7;
 VAR    
<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> Antonella
   nombreJugador:string;                              // Variable que guarda el nombre del jugador
   Tablero: array[0..N)[0..M) of int;                 // Matriz que representa el tablero
   nivel,i:int;                                       // nivel que se juega: 1 si es basico, 2 si es medio
   turno:int;                                         // turno 1 si le toca jugar al usuario o turno 2 si le toca al cpu
   JugadaPrimeraVez:bool;                             // variable booleana que vale true en la primera iteracion, es decir, la primera vez que juega el cpu
   linea,p,q:int;                                     // linea es la fila en que se encuentra jugando la pc, es la fila inferior maxima de cada jugada
   jugada:int;                                        // jugada es la jugada del usuario, representa la columna que escoge el usuario 
   ganador:int;                                       // ganador guarda el ganador de cada partida, hay ganador cuando alguno complete alguna linea
   esValida:bool;                                     // dice si la jugada del usuario es valida
   siguePartida:bool;                                 // true si no hay un ganador aun y/o si el tablero no se ha llenado, o si el usuario quiere seguir jugando
   jugarOtra:bool;                                    // true si el usuario quiere jugar otra partida
   ganador0,ganador1,ganador2:int;                    // indican el resultado final de todas las partidas, 0 si hay empate, 1 si gana la persona, 2 si gana el cpu
<<<<<<< HEAD
=======
   nombreJugador:string;
   Tablero: array[0..N)[0..M) of int;
   nivel,i:int;
   turno:int;
   JugadaPrimeraVez:bool;
   linea,p,q:int;
   jugada:int;
   ganador:int;
   esValida:bool;
   siguePartida:bool;
   jugarOtra:bool;
   ganador0,ganador1,ganador2:int;
   PrimeraPartida:bool
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======
   PrimeraPartida:bool;
>>>>>>> Antonella

   {N>0 /\ M>0}
   jugarOtra, PrimeraPartida:=True, True;
   ganador0,ganador1,ganador2:=0,0,0 //Se inicializan en 0 ya que luego se le sumara 1 dependiendo de quien gane
   {inv: ,cota:}
   do jugarOtra -> 
<<<<<<< HEAD
<<<<<<< HEAD
	   InicializarPartida(N,M,nombreJugador,nivel,Tablero); 
=======
	   InicializarPartida(PrimeraPartida, ganador,N,M,linea,p,q,JugadaPrimeraVez,nombreJugador,nivel,Tablero, turno) 
>>>>>>> 6f63973786ce615e60db2ba3bc72bda5250b3e31
=======

	   InicializarPartida(PrimeraPartida, ganador,N,M,linea,p,q,JugadaPrimeraVez,nombreJugador,nivel,Tablero, turno) 
>>>>>>> Antonella
	   siguePartida:=True;
       JugadaPrimeraVez:=True;
       linea:=5;
       q,p:= random.randint(6),5; //p y q corresponden a la posicion de la fila y columna (respectivamente) que almacenan la ultima jugada de la computadora
	   {inv: ,cota: }             //en la primera iteracion, se debe jugar en la fila 5 y se escoge de forma aleatoria la columna a jugar 
	   do siguePartida ->         
	     ObtenerJugada(nivel,turno,nombreJugador,N,M,Tablero,JugadaPrimeraVez,linea,p,q,jugada); 
	     validarJugada(N,M,Talero,jugada,esValida,i)      
	     if esValida=True ->            
	       ReflejarJugada(i,jugada,turno,Tablero);           
	       CambiarTurno(turno);         
	     [] esValida=False ->            
	        skip
	     fi 
	     DeterminarGanador(N,M,turno,Tablero,ganador);
	     DeterminarPartidaTerminada(N,M,ganador,Tablero,siguePartida);
	     if siguePartida=True ->
	       SeguirJugando(siguePartida)
	     [] siguePartida=False ->
	        skip
	      fi
	   od; 
	   DesplegarGanador(ganador);
	   ContarGanadorPartida(ganador,ganador0,ganador1,ganador2); 
	   otraPartida(jugarOtra, PrimeraPartida);       
   od; 
   DesplegarResultadoFinal(ganador0,ganador1,ganador2)

<<<<<<< HEAD
   ]
=======
   ]
>>>>>>> Antonella
