//Cosas por poner en InicializarPartida

Linea:=5
q,p:= Random.Randint(6),5 //p y q serian las jugadas de la computadora en el nivel medio. Me sirve para guardar su ultima jugada
JugadaPrimeraVez:=True



proc ObtenerJugada(in turno:int, nivel:int; in-out Matrix: array [0,N) of int, p:int, q:int, JugadaPrimeraVez:bool, Linea:int)        //Faltan parametros para los otros, estos son los que necesito para correr el nivel 2
    if turno=2 /\ nivel=2 ->

        if JugadaPrimeraVez=True ->
            do JugadaPrimeraVez=True ->
            if Matrix[p][q]=0 ->
                Matrix[p][q]:=2;
                JugadaPrimeraVez:=False
            [] Matrix[p][q]!=0 ->
                q:=Random.Randint(6)
            fi
        [] JugadaPrimeraVez=False ->
            DeterminarLinea(Matrix, p, q, Linea)
            if Linea=0 -> 
                q:=q+1
                A[p][q]:=2
            [] Linea=1 -> 
                q:=q-1
                A[p][q]:=2
            [] Linea=2 -> 
                p:=p-1
                A[p][q]:=2
            [] Linea=3 -> 
                p,q:=p-1,q+1
                A[p-1][q]:=2
            [] Linea=4 -> 
                p,q:=p-1,q-1
                A[p][q]:=2
            [] Linea=5 ->   
                Valida:=False
                do Valida=False ->
                    p,q:=Random.Randint(5), Random.Randint(6)
                    DeterminarJugadaValida(Matrix, p, q, Valida)
                    if Valida=False ->
                        skip
                    [] Valida=True ->
                        Matrix[p][q]:=2
                    fi
                od
            fi
        fi

        
proc DeterminarLinea(in Matrix: array[0..N)[0..M) of int, p:int, q:int ; in-out Linea:int)
{Linea=0 \/ Linea=1 \/ Linea=2 \/ Linea=3 \/ Linea=4 \/ Linea=5}
{Linea=0 \/ Linea=1 \/ Linea=2 \/ Linea=3 \/ Linea=4 \/ Linea=5}
[ var Valida0, Valida1, Valida2, Valida3:bool          
    DeterminarJugadaValida(Matrix, p, q+1, Valida0)
    DeterminarJugadaValida(Matrix, p, q-1, Valida1)
    DeterminarJugadaValida(Matrix, p-1, q, Valida2)          //Verfica si cada posible fila tiene ficha abajo. y luego en el if de abajo lo toma en cuenta
    DeterminarJugadaValida(Matrix, p-1, q+1, Valida3)
    DeterminarJugadaValida(Matrix, p-1, q-1, Valida4)

    if p!=0 ->
        if Valida0=True ->
            Linea:=0
        [] Valida1=True ->
            Linea:=1
        [] Valida2=True ->
            Linea:=2
        [] Valida3=True ->
            Linea:=3
        [] Valida4=True ->
            Linea:=4
        [] Valida0=False /\ Valida1=False /\ Valida2=False /\ Valida3=False /\ Valida4=False ->                                           
            Linea:=5
        fi
    [] p=0 ->
        if Linea=0 /\ Valida0=True ->
            Linea:=0
        [] Linea=1 /\ Valida0=True ->
            Linea:=1
        [] Valida0=False /\ Valida1=False ->
            Linea:=5
        fi
    fi
]


proc DeterminarJugadaValida (in Matrix array [0,N) of int, i:int, j:int, out Valida;bool)
    if i>=0 /\ i<=5 /\ j>=0 /\ j<=6->
        if A[i][j]=0 ->
            if i=5 -> Valida:=True
            [] i!=5 -> 
                if A[i+1][j]=1 \/ A[i+1][j]=2 -> Valida:= True
                [] A[i+1][j]=0 -> Valida:=False
                fi
            fi
        [] A[i][j]!=0 ->
            Valida:=False
        fi
    [] i<0 \/ i>5 \/ j<0 \/ j>6 ->
        Valida:=False
    fi

